package luan;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.Scanner;

/**
 * @author zhenh_000
 * @version 0.1
 * @note
 * 给定文件夹,给定后缀,给定输出目录,复制所有指定的后缀文件到新目录
 */
public class FindSuffix {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("当前路径: "+System.getProperty("user.dir"));
		System.out.println("输入文件夹的绝对路径");
		String foldername = in.nextLine();
		System.out.println("输出文件夹的绝对路径");
		String destination = in.nextLine();
		System.out.println("Java正则表达式,千万注意.*表示任意字符重复");
		String regex = in.nextLine();
		File store = new File(destination);
		store.mkdirs();
		listfile(foldername,store,regex);
		
		System.out.println("end");
		in.close();
	}
	
	private static void listfile(String foldername,File store,String regex) {
		File folderFile = new File(foldername);
		//listFiles方法只能到下一层,而不能无限深入,所以需要递归
		File[] all = folderFile.listFiles();
		
		for(int i=0;i<all.length;i++) {
			if( all[i].isFile() ) {
				if( all[i].getName().matches(regex) ) {
					copy(all[i], store);
				}
			}
		if( all[i].isDirectory() ) {
			listfile( all[i].toString(),store,regex);
		}
		}	
	}
	//利用文件管道复制,来源网络,需学习其中FileChannel类的API
	private static void  copy(File source,File destination) {
		File destinationFile = new File(destination.toString()+"\\"+source.getName());
		try {
			destinationFile.createNewFile();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		try {
			FileInputStream filein = new FileInputStream(source);
			FileOutputStream fileout = new FileOutputStream(destinationFile);
			FileChannel in = filein.getChannel();
			FileChannel out = fileout.getChannel();
			in.transferTo(0, in.size(), out);
			
			filein.close();
			fileout.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
}
